/*
運算子二: 賦值運算子 
= += -= *=  /= %=
*/
class OperatorTest2{
	public static void main(String[] args){
		// 1. 賦值符號: =
		// 連續賦值
		int int1, int2;
		int1 = int2 = 10;
		int int3 = 10, int4 = 20;
		
		//*******************************************************************
		// 2. 擴展賦值符號: += -= *=  /= %=
		int num1 = 10;
		num1 += 2;					// num1 = num1 + 2
		System.out.println(num1);	// 輸出結果: 12
		
		int num2 = 12;
		num2 %= 5;					// num2 = num2 % 5
		System.out.println(num2);	// 輸出結果: 2
		
		//***************************差別*************************************
		short short1 = 10;
		// short1 = short1 + 2;		// 編譯失敗
		short1 += 2;				// 不會改變變數本身的數據型態
		System.out.println(short1);	// 輸出結果: 12
		
		//*******************************************************************
		// 開發中，如果希望變數實現+2的操作，有幾種方法? (前提: int num = 10;)
		// 方法一: num = num + 2;
		// 方法二: num += 2;	// 推薦
		// num++++;				// 編譯失敗
		
		// 開發中，如果希望變數實現+1的操作，有幾種方法? (前提: int num = 10;)
		// 方法一: num = num + 1;
		// 方法二: num += 1;
		// 方法三: num++;		// 推薦
		
		//***************************練習*************************************
		// 練習1
		int i = 1;
		i *= 0.1;				// i = i * 0.1; (不會改變變數本身的數據型態)
		System.out.println(i);	// 輸出結果: 0
		i++;					
		System.out.println(i);	// 輸出結果: 1
		
		// 練習2
		int m = 2;
		int n = 3;
		n *= m++;						// n = n * m++;
		System.out.println("m = " + m);	// 輸出結果: 3
		System.out.println("n = " + n);	// 輸出結果: 6
		
		// 練習3
		int n1 = 10;
		n1 += (n1++) + (++n1);		// n1 = n1 + (n1++) + (++n1);
									// 10 + 10 -> n = 11 -> 10 + 10 + 12 -> n = 32
		System.out.println(n1);		// 輸出結果: 32
	}
}